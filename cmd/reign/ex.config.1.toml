# Example Config to create a domain/dominion
uuid = "GUID-1" # unique UUID
title = "Dominion" # Should Be identical between domains

logfilename = "/usr/local/domain/logs/domain1.log"

port = 9100 # doesn't matter for the most part, the domain will find other domains on any functioning port

traits = [
	"compute", # TODO @jmbarzee consider changing to allow for types of compute
	"neoPixelLight",
]

[connectionConfig]
	dialtimeout = 3000000	# All timings are in Nanoseconds
	[connectionConfig.isolationCheck]
		max = 10000000000
		min = 500000000
	[connectionConfig.isolationTimeout]
		max = 100000000000
		min = 5000000000
	[connectionConfig.heartbeatCheck]
		max = 40000000000
		min = 1000000000

[serviceHierarchyConfig]
	requiredVotePercentage = 0.90
	electionTimeout = 10000000000
	[serviceHierarchyConfig.electionBackoff]
		max = 10000000000
		min = 1000000
	[serviceHierarchyConfig.dependencyCheck]
		max = 10000000000
		min = 1000000

[services]
	[services.webServer]
		priority = "dependency"
		depends = []
		traits = [
			"compute",
		]

	[services.musicInformationRetrival]
		priority = "dependency"
		depends = []
		traits = [
			"compute",
		]

	[services.experienceOrchastrator]
		priority = "dependency"
		depends = [
			"musicInformationRetrival",
			"webServer",
		]
		traits = [
			"compute",
		]

	[services.lightOrchastrator]
		priority = "dependency"
		depends = [
			"experienceOrchastrator",
		]
		traits = [
			"compute",
		]
	[services.neoPixelLight]
		priority = "required"
		depends = [
			"lightOrchastrator",
		]
		traits = [
			"neoPixelLight",
		]

	[services.soundOrchastrator]
		priority = "dependency"
		depends = [
			"experienceOrchastrator",
		]
		traits = [
			"compute",
		]
	[services.dmlSpeaker]
		priority = "required"
		depends = [
			"soundOrchastrator",
		]
		traits = [
			"dmlSpeaker",
		]

	[services.enviornmentOrchastrator]
		priority = "dependency"
		depends = [
			"webServer",
		]
		traits = [
			"compute",
		]
	[services.thermostat]
		priority = "required"
		depends = [
			"enviornmentOrchastrator",
		]
		traits = [
			"thermostat",
		]
	[services.shade]
		priority = "required"
		depends = [
			"enviornmentOrchastrator",
		]
		traits = [
			"shade",
		]
	[services.desk]
		priority = "required"
		depends = [
			"enviornmentOrchastrator",
		]
		traits = [
			"desk",
		]