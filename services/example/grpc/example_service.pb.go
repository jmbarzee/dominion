// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example_service.proto

package grpcdomain

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExampleRPCRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExampleRPCRequest) Reset()         { *m = ExampleRPCRequest{} }
func (m *ExampleRPCRequest) String() string { return proto.CompactTextString(m) }
func (*ExampleRPCRequest) ProtoMessage()    {}
func (*ExampleRPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdab94845fc2b7e8, []int{0}
}

func (m *ExampleRPCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExampleRPCRequest.Unmarshal(m, b)
}
func (m *ExampleRPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExampleRPCRequest.Marshal(b, m, deterministic)
}
func (m *ExampleRPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleRPCRequest.Merge(m, src)
}
func (m *ExampleRPCRequest) XXX_Size() int {
	return xxx_messageInfo_ExampleRPCRequest.Size(m)
}
func (m *ExampleRPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleRPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleRPCRequest proto.InternalMessageInfo

type ExampleRPCReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExampleRPCReply) Reset()         { *m = ExampleRPCReply{} }
func (m *ExampleRPCReply) String() string { return proto.CompactTextString(m) }
func (*ExampleRPCReply) ProtoMessage()    {}
func (*ExampleRPCReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdab94845fc2b7e8, []int{1}
}

func (m *ExampleRPCReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExampleRPCReply.Unmarshal(m, b)
}
func (m *ExampleRPCReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExampleRPCReply.Marshal(b, m, deterministic)
}
func (m *ExampleRPCReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleRPCReply.Merge(m, src)
}
func (m *ExampleRPCReply) XXX_Size() int {
	return xxx_messageInfo_ExampleRPCReply.Size(m)
}
func (m *ExampleRPCReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleRPCReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleRPCReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExampleRPCRequest)(nil), "grpcdomain.ExampleRPCRequest")
	proto.RegisterType((*ExampleRPCReply)(nil), "grpcdomain.ExampleRPCReply")
}

func init() { proto.RegisterFile("example_service.proto", fileDescriptor_bdab94845fc2b7e8) }

var fileDescriptor_bdab94845fc2b7e8 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x4a, 0x2f, 0x2a, 0x48, 0x4e, 0xc9, 0xcf, 0x4d, 0xcc, 0xcc, 0x53, 0x12, 0xe6,
	0x12, 0x74, 0x85, 0x28, 0x0a, 0x0a, 0x70, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x12,
	0xe4, 0xe2, 0x47, 0x16, 0x2c, 0xc8, 0xa9, 0x34, 0x8a, 0xe1, 0xe2, 0x83, 0x0a, 0x05, 0x43, 0xcc,
	0x12, 0xf2, 0xe2, 0xe2, 0x42, 0x28, 0x12, 0x92, 0xd5, 0x43, 0x18, 0xaa, 0x87, 0x61, 0xa2, 0x94,
	0x34, 0x2e, 0xe9, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xc3, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xc0, 0xeb, 0x2c, 0xfd, 0xb1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleServiceClient interface {
	// ExampleRPC is an example RPC
	ExampleRPC(ctx context.Context, in *ExampleRPCRequest, opts ...grpc.CallOption) (*ExampleRPCReply, error)
}

type exampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewExampleServiceClient(cc *grpc.ClientConn) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) ExampleRPC(ctx context.Context, in *ExampleRPCRequest, opts ...grpc.CallOption) (*ExampleRPCReply, error) {
	out := new(ExampleRPCReply)
	err := c.cc.Invoke(ctx, "/grpcdomain.ExampleService/ExampleRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleServiceServer is the server API for ExampleService service.
type ExampleServiceServer interface {
	// ExampleRPC is an example RPC
	ExampleRPC(context.Context, *ExampleRPCRequest) (*ExampleRPCReply, error)
}

// UnimplementedExampleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExampleServiceServer struct {
}

func (*UnimplementedExampleServiceServer) ExampleRPC(ctx context.Context, req *ExampleRPCRequest) (*ExampleRPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleRPC not implemented")
}

func RegisterExampleServiceServer(s *grpc.Server, srv ExampleServiceServer) {
	s.RegisterService(&_ExampleService_serviceDesc, srv)
}

func _ExampleService_ExampleRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).ExampleRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.ExampleService/ExampleRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).ExampleRPC(ctx, req.(*ExampleRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdomain.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExampleRPC",
			Handler:    _ExampleService_ExampleRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example_service.proto",
}
