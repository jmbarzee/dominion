// Code generated by protoc-gen-go. DO NOT EDIT.
// source: domain.proto

package grpcdomain

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("domain.proto", fileDescriptor_73e6234e76dbdb84) }

var fileDescriptor_73e6234e76dbdb84 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x05, 0x61, 0x0f, 0xe3, 0x0a, 0x1a, 0x3d, 0x05, 0x5d, 0x45, 0xef, 0x3d, 0xe8, 0x23,
	0xb8, 0x20, 0x82, 0xe2, 0x62, 0x11, 0xbc, 0x95, 0xb5, 0x3b, 0xd4, 0x81, 0x36, 0x89, 0xc9, 0x54,
	0xe8, 0x53, 0xf9, 0x8a, 0x62, 0x93, 0x6a, 0x52, 0xac, 0xec, 0x75, 0xbe, 0xff, 0xff, 0x32, 0x4c,
	0x60, 0xbe, 0xd1, 0xcd, 0x9a, 0x54, 0x66, 0xac, 0x66, 0x2d, 0xa0, 0xb2, 0xa6, 0xf4, 0x13, 0x29,
	0x2a, 0xe4, 0xc2, 0xa1, 0xfd, 0xa0, 0x12, 0x9d, 0xe7, 0xf2, 0x88, 0x36, 0xa8, 0x98, 0xb8, 0x2b,
	0x6a, 0x72, 0x3c, 0x0c, 0xb5, 0x41, 0x55, 0x18, 0xed, 0x88, 0x49, 0x07, 0x93, 0x3c, 0x2e, 0x6b,
	0xed, 0x70, 0x34, 0xbd, 0xfa, 0xdc, 0x85, 0xd9, 0xb2, 0xd7, 0x8b, 0x07, 0xd8, 0xbb, 0x45, 0xce,
	0x83, 0x5f, 0x2c, 0xb2, 0xdf, 0xa7, 0xb3, 0x08, 0x3c, 0xe1, 0x7b, 0x8b, 0x8e, 0xe5, 0xc9, 0x24,
	0x37, 0x75, 0x77, 0xb1, 0x23, 0x9e, 0xe1, 0x30, 0x7f, 0x5b, 0x5b, 0xbc, 0x0b, 0x0b, 0xde, 0x93,
	0x63, 0x71, 0x16, 0x97, 0x62, 0x32, 0x58, 0x4f, 0xa7, 0x03, 0x5e, 0xfb, 0x02, 0x07, 0xcb, 0xb6,
	0x31, 0x89, 0xf5, 0x32, 0x2e, 0x8d, 0xe9, 0xd6, 0xe6, 0x15, 0xcc, 0x1f, 0x0d, 0xaa, 0x55, 0x38,
	0x50, 0xba, 0x6b, 0x4c, 0xfe, 0x34, 0xa6, 0x01, 0x6f, 0xcc, 0x61, 0xff, 0xe6, 0xfb, 0xe8, 0x3f,
	0xca, 0xf3, 0xb8, 0x91, 0xa0, 0xc1, 0xb9, 0xf8, 0x27, 0xd1, 0x4b, 0x5f, 0x67, 0xfd, 0xc7, 0x5d,
	0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x31, 0xc4, 0xd9, 0x28, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DomainClient is the client API for Domain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DomainClient interface {
	// GetServices returns the availible services and their locations
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesReply, error)
	// ShareIdentityList Exchanges the IdentityList which the domain is aware of
	ShareIdentityList(ctx context.Context, in *IdentityListRequest, opts ...grpc.CallOption) (*IdentityListReply, error)
	// DumpIdentityList Dumps the IdentityList which the domain is aware of
	DumpIdentityList(ctx context.Context, in *DumpIdentityListRequest, opts ...grpc.CallOption) (*IdentityListReply, error)
	// OpenPosition declares the new service which is needed and requests Appointments
	OpenPosition(ctx context.Context, in *OpenPositionRequest, opts ...grpc.CallOption) (*OpenPositionReply, error)
	// ClosePosition ends an election and informs if the position was awarded
	ClosePosition(ctx context.Context, in *ClosePositionRequest, opts ...grpc.CallOption) (*ClosePositionReply, error)
}

type domainClient struct {
	cc *grpc.ClientConn
}

func NewDomainClient(cc *grpc.ClientConn) DomainClient {
	return &domainClient{cc}
}

func (c *domainClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesReply, error) {
	out := new(GetServicesReply)
	err := c.cc.Invoke(ctx, "/grpcdomain.Domain/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) ShareIdentityList(ctx context.Context, in *IdentityListRequest, opts ...grpc.CallOption) (*IdentityListReply, error) {
	out := new(IdentityListReply)
	err := c.cc.Invoke(ctx, "/grpcdomain.Domain/ShareIdentityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) DumpIdentityList(ctx context.Context, in *DumpIdentityListRequest, opts ...grpc.CallOption) (*IdentityListReply, error) {
	out := new(IdentityListReply)
	err := c.cc.Invoke(ctx, "/grpcdomain.Domain/DumpIdentityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) OpenPosition(ctx context.Context, in *OpenPositionRequest, opts ...grpc.CallOption) (*OpenPositionReply, error) {
	out := new(OpenPositionReply)
	err := c.cc.Invoke(ctx, "/grpcdomain.Domain/OpenPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) ClosePosition(ctx context.Context, in *ClosePositionRequest, opts ...grpc.CallOption) (*ClosePositionReply, error) {
	out := new(ClosePositionReply)
	err := c.cc.Invoke(ctx, "/grpcdomain.Domain/ClosePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainServer is the server API for Domain service.
type DomainServer interface {
	// GetServices returns the availible services and their locations
	GetServices(context.Context, *GetServicesRequest) (*GetServicesReply, error)
	// ShareIdentityList Exchanges the IdentityList which the domain is aware of
	ShareIdentityList(context.Context, *IdentityListRequest) (*IdentityListReply, error)
	// DumpIdentityList Dumps the IdentityList which the domain is aware of
	DumpIdentityList(context.Context, *DumpIdentityListRequest) (*IdentityListReply, error)
	// OpenPosition declares the new service which is needed and requests Appointments
	OpenPosition(context.Context, *OpenPositionRequest) (*OpenPositionReply, error)
	// ClosePosition ends an election and informs if the position was awarded
	ClosePosition(context.Context, *ClosePositionRequest) (*ClosePositionReply, error)
}

// UnimplementedDomainServer can be embedded to have forward compatible implementations.
type UnimplementedDomainServer struct {
}

func (*UnimplementedDomainServer) GetServices(ctx context.Context, req *GetServicesRequest) (*GetServicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (*UnimplementedDomainServer) ShareIdentityList(ctx context.Context, req *IdentityListRequest) (*IdentityListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareIdentityList not implemented")
}
func (*UnimplementedDomainServer) DumpIdentityList(ctx context.Context, req *DumpIdentityListRequest) (*IdentityListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpIdentityList not implemented")
}
func (*UnimplementedDomainServer) OpenPosition(ctx context.Context, req *OpenPositionRequest) (*OpenPositionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPosition not implemented")
}
func (*UnimplementedDomainServer) ClosePosition(ctx context.Context, req *ClosePositionRequest) (*ClosePositionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePosition not implemented")
}

func RegisterDomainServer(s *grpc.Server, srv DomainServer) {
	s.RegisterService(&_Domain_serviceDesc, srv)
}

func _Domain_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.Domain/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_ShareIdentityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).ShareIdentityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.Domain/ShareIdentityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).ShareIdentityList(ctx, req.(*IdentityListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_DumpIdentityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpIdentityListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).DumpIdentityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.Domain/DumpIdentityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).DumpIdentityList(ctx, req.(*DumpIdentityListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_OpenPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).OpenPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.Domain/OpenPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).OpenPosition(ctx, req.(*OpenPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_ClosePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).ClosePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.Domain/ClosePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).ClosePosition(ctx, req.(*ClosePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Domain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdomain.Domain",
	HandlerType: (*DomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServices",
			Handler:    _Domain_GetServices_Handler,
		},
		{
			MethodName: "ShareIdentityList",
			Handler:    _Domain_ShareIdentityList_Handler,
		},
		{
			MethodName: "DumpIdentityList",
			Handler:    _Domain_DumpIdentityList_Handler,
		},
		{
			MethodName: "OpenPosition",
			Handler:    _Domain_OpenPosition_Handler,
		},
		{
			MethodName: "ClosePosition",
			Handler:    _Domain_ClosePosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain.proto",
}
