// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package grpcd

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ServiceHeartbeatRequest contains the identity of the Domain
type ServiceHeartbeatRequest struct {
	// Domain is the requesting Domain
	Domain               *DomainIdentity `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServiceHeartbeatRequest) Reset()         { *m = ServiceHeartbeatRequest{} }
func (m *ServiceHeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceHeartbeatRequest) ProtoMessage()    {}
func (*ServiceHeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *ServiceHeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceHeartbeatRequest.Unmarshal(m, b)
}
func (m *ServiceHeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceHeartbeatRequest.Marshal(b, m, deterministic)
}
func (m *ServiceHeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHeartbeatRequest.Merge(m, src)
}
func (m *ServiceHeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_ServiceHeartbeatRequest.Size(m)
}
func (m *ServiceHeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHeartbeatRequest proto.InternalMessageInfo

func (m *ServiceHeartbeatRequest) GetDomain() *DomainIdentity {
	if m != nil {
		return m.Domain
	}
	return nil
}

type ServiceHeartbeatReply struct {
	// Service is the responding serviceIdentity
	Service              *ServiceIdentity `protobuf:"bytes,1,opt,name=Service,proto3" json:"Service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ServiceHeartbeatReply) Reset()         { *m = ServiceHeartbeatReply{} }
func (m *ServiceHeartbeatReply) String() string { return proto.CompactTextString(m) }
func (*ServiceHeartbeatReply) ProtoMessage()    {}
func (*ServiceHeartbeatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *ServiceHeartbeatReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceHeartbeatReply.Unmarshal(m, b)
}
func (m *ServiceHeartbeatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceHeartbeatReply.Marshal(b, m, deterministic)
}
func (m *ServiceHeartbeatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHeartbeatReply.Merge(m, src)
}
func (m *ServiceHeartbeatReply) XXX_Size() int {
	return xxx_messageInfo_ServiceHeartbeatReply.Size(m)
}
func (m *ServiceHeartbeatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHeartbeatReply.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHeartbeatReply proto.InternalMessageInfo

func (m *ServiceHeartbeatReply) GetService() *ServiceIdentity {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceHeartbeatRequest)(nil), "grpcd.ServiceHeartbeatRequest")
	proto.RegisterType((*ServiceHeartbeatReply)(nil), "grpcd.ServiceHeartbeatReply")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2f, 0x2a, 0x48, 0x4e,
	0x91, 0xe2, 0xcb, 0x4c, 0x49, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0x84, 0x08, 0x2b, 0x79, 0x70, 0x89,
	0x07, 0x43, 0xd4, 0x79, 0xa4, 0x26, 0x16, 0x95, 0x24, 0xa5, 0x26, 0x96, 0x04, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x08, 0xe9, 0x72, 0xb1, 0xb9, 0xe4, 0xe7, 0x26, 0x66, 0xe6, 0x49, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x1b, 0x89, 0xea, 0x81, 0x8d, 0xd0, 0x83, 0x08, 0x7a, 0x42, 0xcd, 0x09, 0x82,
	0x2a, 0x52, 0xf2, 0xe4, 0x12, 0xc5, 0x34, 0xa9, 0x20, 0xa7, 0x52, 0xc8, 0x80, 0x8b, 0x1d, 0x2a,
	0x01, 0x35, 0x48, 0x0c, 0x6a, 0x10, 0x54, 0x14, 0x6e, 0x12, 0x4c, 0x99, 0x51, 0x18, 0x5c, 0x87,
	0x90, 0x37, 0x17, 0x27, 0xdc, 0x38, 0x21, 0x39, 0x54, 0x8d, 0xe8, 0x2e, 0x96, 0x92, 0xc1, 0x29,
	0x5f, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0xb3, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0xa9, 0x55, 0xdd, 0xb6, 0x1b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// Heartbeat verifies the status/identity of the domain
	Heartbeat(ctx context.Context, in *ServiceHeartbeatRequest, opts ...grpc.CallOption) (*ServiceHeartbeatReply, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Heartbeat(ctx context.Context, in *ServiceHeartbeatRequest, opts ...grpc.CallOption) (*ServiceHeartbeatReply, error) {
	out := new(ServiceHeartbeatReply)
	err := c.cc.Invoke(ctx, "/grpcd.Service/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// Heartbeat verifies the status/identity of the domain
	Heartbeat(context.Context, *ServiceHeartbeatRequest) (*ServiceHeartbeatReply, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Heartbeat(ctx context.Context, req *ServiceHeartbeatRequest) (*ServiceHeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcd.Service/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Heartbeat(ctx, req.(*ServiceHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcd.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Service_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
