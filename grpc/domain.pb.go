// Code generated by protoc-gen-go. DO NOT EDIT.
// source: domain.proto

package grpcd

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// StartServiceRequest contains the type of service which needs started
type StartServiceRequest struct {
	// Type is the name of the service which is requested
	Type                 string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartServiceRequest) Reset()         { *m = StartServiceRequest{} }
func (m *StartServiceRequest) String() string { return proto.CompactTextString(m) }
func (*StartServiceRequest) ProtoMessage()    {}
func (*StartServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73e6234e76dbdb84, []int{0}
}

func (m *StartServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartServiceRequest.Unmarshal(m, b)
}
func (m *StartServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartServiceRequest.Marshal(b, m, deterministic)
}
func (m *StartServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartServiceRequest.Merge(m, src)
}
func (m *StartServiceRequest) XXX_Size() int {
	return xxx_messageInfo_StartServiceRequest.Size(m)
}
func (m *StartServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartServiceRequest proto.InternalMessageInfo

func (m *StartServiceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// StartServiceRequest contains the type of service which needs started
type StartServiceReply struct {
	// Service is the newly started service
	Service              *ServiceIdentity `protobuf:"bytes,1,opt,name=Service,proto3" json:"Service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StartServiceReply) Reset()         { *m = StartServiceReply{} }
func (m *StartServiceReply) String() string { return proto.CompactTextString(m) }
func (*StartServiceReply) ProtoMessage()    {}
func (*StartServiceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_73e6234e76dbdb84, []int{1}
}

func (m *StartServiceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartServiceReply.Unmarshal(m, b)
}
func (m *StartServiceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartServiceReply.Marshal(b, m, deterministic)
}
func (m *StartServiceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartServiceReply.Merge(m, src)
}
func (m *StartServiceReply) XXX_Size() int {
	return xxx_messageInfo_StartServiceReply.Size(m)
}
func (m *StartServiceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StartServiceReply.DiscardUnknown(m)
}

var xxx_messageInfo_StartServiceReply proto.InternalMessageInfo

func (m *StartServiceReply) GetService() *ServiceIdentity {
	if m != nil {
		return m.Service
	}
	return nil
}

// HeartbeatRequest contains the identity of the dominion
type HeartbeatRequest struct {
	// Dominion is the requesting dominion
	Dominion             *DominionIdentity `protobuf:"bytes,1,opt,name=Dominion,proto3" json:"Dominion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73e6234e76dbdb84, []int{2}
}

func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatRequest.Unmarshal(m, b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartbeatRequest.Size(m)
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetDominion() *DominionIdentity {
	if m != nil {
		return m.Dominion
	}
	return nil
}

type HeartbeatReply struct {
	// Domain is the responding domainIdentity
	Domain               *DomainIdentity `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HeartbeatReply) Reset()         { *m = HeartbeatReply{} }
func (m *HeartbeatReply) String() string { return proto.CompactTextString(m) }
func (*HeartbeatReply) ProtoMessage()    {}
func (*HeartbeatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_73e6234e76dbdb84, []int{3}
}

func (m *HeartbeatReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatReply.Unmarshal(m, b)
}
func (m *HeartbeatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatReply.Marshal(b, m, deterministic)
}
func (m *HeartbeatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatReply.Merge(m, src)
}
func (m *HeartbeatReply) XXX_Size() int {
	return xxx_messageInfo_HeartbeatReply.Size(m)
}
func (m *HeartbeatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatReply.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatReply proto.InternalMessageInfo

func (m *HeartbeatReply) GetDomain() *DomainIdentity {
	if m != nil {
		return m.Domain
	}
	return nil
}

func init() {
	proto.RegisterType((*StartServiceRequest)(nil), "grpcd.StartServiceRequest")
	proto.RegisterType((*StartServiceReply)(nil), "grpcd.StartServiceReply")
	proto.RegisterType((*HeartbeatRequest)(nil), "grpcd.HeartbeatRequest")
	proto.RegisterType((*HeartbeatReply)(nil), "grpcd.HeartbeatReply")
}

func init() { proto.RegisterFile("domain.proto", fileDescriptor_73e6234e76dbdb84) }

var fileDescriptor_73e6234e76dbdb84 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xc9, 0xcf, 0x4d,
	0xcc, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2f, 0x2a, 0x48, 0x4e, 0x91,
	0xe2, 0xcb, 0x4c, 0x49, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0x84, 0x08, 0x2b, 0x69, 0x72, 0x09, 0x07,
	0x97, 0x24, 0x16, 0x95, 0x04, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x06, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0x84, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x81, 0xd9, 0x4a, 0xae, 0x5c, 0x82, 0xa8, 0x4a, 0x0b, 0x72, 0x2a, 0x85, 0x0c, 0xb8, 0xd8,
	0xa1, 0x7c, 0xb0, 0x5a, 0x6e, 0x23, 0x31, 0x3d, 0xb0, 0x45, 0x7a, 0x50, 0x51, 0x4f, 0xa8, 0x75,
	0x41, 0x30, 0x65, 0x4a, 0xee, 0x5c, 0x02, 0x1e, 0xa9, 0x89, 0x45, 0x25, 0x49, 0xa9, 0x89, 0x25,
	0x30, 0xeb, 0x8c, 0xb9, 0x38, 0x5c, 0xf2, 0x73, 0x33, 0xf3, 0x32, 0xf3, 0xf3, 0xa0, 0xc6, 0x88,
	0x43, 0x8d, 0x81, 0x09, 0xc3, 0xcd, 0x81, 0x2b, 0x54, 0xb2, 0xe7, 0xe2, 0x43, 0x32, 0x08, 0xe4,
	0x18, 0x5d, 0x2e, 0x36, 0x17, 0xb0, 0x9f, 0xa1, 0x86, 0x88, 0x22, 0x0c, 0x49, 0xcc, 0x44, 0x18,
	0x01, 0x55, 0x64, 0xd4, 0xcf, 0x08, 0x53, 0x2f, 0xe4, 0xc6, 0xc5, 0x83, 0xec, 0x37, 0x21, 0x29,
	0x98, 0x2f, 0x30, 0xc3, 0x46, 0x4a, 0x02, 0xab, 0x5c, 0x41, 0x4e, 0xa5, 0x12, 0x83, 0x90, 0x2d,
	0x17, 0x27, 0xdc, 0x4d, 0x42, 0x30, 0x3f, 0xa0, 0x7b, 0x57, 0x4a, 0x14, 0x53, 0x02, 0xac, 0x3d,
	0x89, 0x0d, 0x1c, 0x29, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x30, 0x30, 0x82, 0xbb,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DomainClient is the client API for Domain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DomainClient interface {
	// StartService requests a domain start a service
	StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error)
	// Heartbeat verifies the status/identity of the domain
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error)
}

type domainClient struct {
	cc *grpc.ClientConn
}

func NewDomainClient(cc *grpc.ClientConn) DomainClient {
	return &domainClient{cc}
}

func (c *domainClient) StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error) {
	out := new(StartServiceReply)
	err := c.cc.Invoke(ctx, "/grpcd.Domain/StartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, "/grpcd.Domain/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainServer is the server API for Domain service.
type DomainServer interface {
	// StartService requests a domain start a service
	StartService(context.Context, *StartServiceRequest) (*StartServiceReply, error)
	// Heartbeat verifies the status/identity of the domain
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error)
}

// UnimplementedDomainServer can be embedded to have forward compatible implementations.
type UnimplementedDomainServer struct {
}

func (*UnimplementedDomainServer) StartService(ctx context.Context, req *StartServiceRequest) (*StartServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartService not implemented")
}
func (*UnimplementedDomainServer) Heartbeat(ctx context.Context, req *HeartbeatRequest) (*HeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

func RegisterDomainServer(s *grpc.Server, srv DomainServer) {
	s.RegisterService(&_Domain_serviceDesc, srv)
}

func _Domain_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcd.Domain/StartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).StartService(ctx, req.(*StartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcd.Domain/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Domain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcd.Domain",
	HandlerType: (*DomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartService",
			Handler:    _Domain_StartService_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Domain_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain.proto",
}
